import type { PrimaryGeneratedColumnNumericOptions } from "typeorm/decorator/options/PrimaryGeneratedColumnNumericOptions";
import type { PrimaryGeneratedColumnUUIDOptions } from "typeorm/decorator/options/PrimaryGeneratedColumnUUIDOptions";
import type { PrimaryGeneratedColumnIdentityOptions } from "typeorm/decorator/options/PrimaryGeneratedColumnIdentityOptions";
import { ColumnOptions, getMetadataArgsStorage } from "typeorm";
import { GeneratedMetadataArgs } from "typeorm/metadata-args/GeneratedMetadataArgs";
import { aggregateOrNewColumn } from "./utils";
import { ObjectUtils } from "./ObjectUtils";

/**
 * Column decorator is used to mark a specific class property as a table column.
 */
/**
 * @description Decorator to mark a property as a primary key with generated value.
 * @summary Registers a primary column that is automatically generated by the database/ORM. Overloads allow selecting the generation strategy and options.
 * @return {PropertyDecorator} A property decorator to be applied on an entity field.
 * @function PrimaryGeneratedColumn
 * @memberOf module:for-typeorm
 */
export function PrimaryGeneratedColumn(): PropertyDecorator;

/**
 * Column decorator is used to mark a specific class property as a table column.
 */
export function PrimaryGeneratedColumn(
  options: PrimaryGeneratedColumnNumericOptions
): PropertyDecorator;

/**
 * Column decorator is used to mark a specific class property as a table column.
 */
export function PrimaryGeneratedColumn(
  strategy: "increment",
  options?: PrimaryGeneratedColumnNumericOptions
): PropertyDecorator;

/**
 * Column decorator is used to mark a specific class property as a table column.
 */
export function PrimaryGeneratedColumn(
  strategy: "uuid",
  options?: PrimaryGeneratedColumnUUIDOptions
): PropertyDecorator;

/**
 * Column decorator is used to mark a specific class property as a table column.
 */
export function PrimaryGeneratedColumn(
  strategy: "rowid",
  options?: PrimaryGeneratedColumnUUIDOptions
): PropertyDecorator;

export function PrimaryGeneratedColumn(
  strategy: "identity",
  options?: PrimaryGeneratedColumnIdentityOptions
): PropertyDecorator;

/**
 * Column decorator is used to mark a specific class property as a table column.
 * Only properties decorated with this decorator will be persisted to the database when entity be saved.
 * This column creates an integer PRIMARY COLUMN with generated set to true.
 */
/**
 * @description Decorator to mark a property as a generated primary key with specific strategy.
 * @summary Normalizes overloads, infers column type from strategy when absent, sets primary flag, aggregates column metadata, and registers generation strategy in TypeORM metadata.
 * @param {('increment'|'uuid'|'rowid'|'identity'|PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions|PrimaryGeneratedColumnIdentityOptions)} [strategyOrOptions] The generation strategy or an options object.
 * @param {PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions|PrimaryGeneratedColumnIdentityOptions} [maybeOptions] Options to complement the chosen strategy.
 * @return {PropertyDecorator} A property decorator to be applied on an entity field.
 * @function PrimaryGeneratedColumn
 * @memberOf module:for-typeorm
 * @mermaid
 * sequenceDiagram
 *   participant Dev as Developer Code
 *   participant Decor as PrimaryGeneratedColumn
 *   participant Meta as TypeORM Metadata
 *   Dev->>Decor: @PrimaryGeneratedColumn(strategyOrOptions, maybeOptions)
 *   Decor->>Dev: returns PropertyDecorator
 *   Dev->>Decor: apply on target property
 *   Decor->>Decor: derive options, infer type by strategy
 *   Decor->>Meta: aggregateOrNewColumn(...)
 *   Decor->>Meta: generations.push({ strategy })
 */
export function PrimaryGeneratedColumn(
  strategyOrOptions?:
    | "increment"
    | "uuid"
    | "rowid"
    | "identity"
    | PrimaryGeneratedColumnNumericOptions
    | PrimaryGeneratedColumnUUIDOptions
    | PrimaryGeneratedColumnIdentityOptions,
  maybeOptions?:
    | PrimaryGeneratedColumnNumericOptions
    | PrimaryGeneratedColumnUUIDOptions
    | PrimaryGeneratedColumnIdentityOptions
): PropertyDecorator {
  // normalize parameters
  const options: ColumnOptions = {};
  let strategy: "increment" | "uuid" | "rowid" | "identity";
  if (strategyOrOptions) {
    if (typeof strategyOrOptions === "string")
      strategy = strategyOrOptions as
        | "increment"
        | "uuid"
        | "rowid"
        | "identity";

    if (ObjectUtils.isObject(strategyOrOptions)) {
      strategy = "increment";
      Object.assign(options, strategyOrOptions);
    }
  } else {
    strategy = "increment";
  }
  if (ObjectUtils.isObject(maybeOptions)) Object.assign(options, maybeOptions);

  return function (object: any, propertyName: any) {
    // if column type is not explicitly set then determine it based on generation strategy
    if (!options.type) {
      if (strategy === "increment" || strategy === "identity") {
        options.type = Number;
      } else if (strategy === "uuid") {
        options.type = "uuid";
      } else if (strategy === "rowid") {
        options.type = "int";
      }
    }

    // explicitly set a primary and generated to column options
    options.primary = true;

    const metadata = getMetadataArgsStorage();
    aggregateOrNewColumn(
      object.constructor,
      propertyName,
      metadata.columns,
      options,
      "regular",
      metadata.relations
    );
    // register generated metadata args
    getMetadataArgsStorage().generations.push({
      target: object.constructor,
      propertyName: propertyName,
      strategy: strategy,
    } as GeneratedMetadataArgs);
  };
}
